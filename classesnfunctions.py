import datetime
from telethon import Button
import asyncio
import datetime
from telethon import TelegramClient
from passwords import *
from telethon import TelegramClient, events, tl, Button
from telethon.tl.types import InputMediaPoll, Poll, PollAnswer
from telethon.tl.custom.conversation import Conversation
from telethon.errors.common import AlreadyInConversationError
from telethon.tl.custom.message import Message
from telethon.hints import MessageLike
from telethon.events.newmessage import NewMessage
from random import shuffle
import logging
from boot import *
from pickle import load, dump
from typing import *

def readfile(file: str, single: bool) -> Union[Any, List[Any]]:
    f = open(file, 'br')
    if single:
        t = load(f)
        f.close()
        return t
    t = []
    while True:
        try:
            t.append(load(f))
        except EOFError:
            return t


def writefile(file: str, *data: Any) -> None:
    '''–°–Ω–∞—á–∞–ª–∞ —Ñ–∞–π–ª, –ø–æ—Ç–æ–º [–¥–∞–Ω–Ω—ã–µ]'''
    print(data)
    f = open(file, 'bw')
    for el in data:
        dump(el, f)
    f.close()


class User():
    tg_id: int
    name: str
    name_by: str

    def __init__(self, tg_id, name, name_by):
        self.tg_id = tg_id
        self.name = name
        self.name_by = name_by


class Student(User):
    parr: str
    money: int

    def __init__(self, tg_id, name, name_by, par='11–í'):
        super().__init__(tg_id, name, name_by)
        self.par = par
        self.money = 30


class Teacher(User):
    classes: List[str]
    subjects: List[str]

    def __init__(self, tg_id, name, name_by, classes=(), subjects=()):
        super().__init__(tg_id, name, name_by)
        self.classes = list(classes[:])
        self.subjects = list(subjects[:])

class MsgGroup():
    messages: List[Tuple[Any, Any]]
    student: int
    timestamp: datetime.datetime

    def __init__(self, msg=(), student=0, timestamp=datetime.datetime.now()):
        self.messages = list(msg[:])
        self.student = student
        self.timestamp = timestamp


class Note(MsgGroup):
    header: str

    def __init__(self, header='', msg=(), student=0, timestamp=datetime.datetime.now()):
        super().__init__(msg, student, timestamp)
        self.header = header


class Task(MsgGroup):
    deadline: datetime.date

    async def show(self, conv: Conversation, ask_for_money: bool = True) -> Optional[Tuple[int, int]]:
        '''
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç (student_from, student_to), –µ—Å–ª–∏ –∫–∏–Ω—É–ª–∏ –º–æ–Ω–µ—Ç–∫—É
        '''

        if self.messages:
            await conv.send_message('–î–∑ –∫ {}:'.format(self.deadline))
            for el in self.messages:
                await conv.send_message(message=el[0], file=el[1])
            if ask_for_money:
                res = await send_inline_message(conv,
                                                "–ü–æ—Å–ª–µ–¥–Ω–∏–π —Ä–∞–∑ –æ–Ω–æ –±—ã–ª–æ –∏–∑–º–µ–Ω–µ–Ω–æ {} {}".format(
                                                    users[self.student].name_by,
                                                    str(self.timestamp)[:-10]),
                                                ['–ö–∏–Ω—É—Ç—å –µ–º—É –º–æ–Ω–µ—Ç–∫—É!', '–Ø –∂–º–æ—Ç'],
                                                timeout=10,
                                                edited_message=['{} –æ—á–µ–Ω—å —Ä–∞–¥(–∞)'.format(
                                                    users[self.student].name),
                                                    '–ß–µ–ª...']
                                                )
                return (res and res[0] == '–ö')
            else:
                await conv.send_message("–ü–æ—Å–ª–µ–¥–Ω–∏–π —Ä–∞–∑ –æ–Ω–æ –±—ã–ª–æ –∏–∑–º–µ–Ω–µ–Ω–æ {} {}".format(
                                                    users[self.student].name_by,
                                                    str(self.timestamp)[:-10]))
        else:
            await conv.send_message('*–ü—É—Å—Ç–æ*')

class HomeTask():
    history: List[Task]

    def __init__(self):
        self.history = []

class RaspDay():
    subjects: List[str]

    def __init__(self, data: List[str]):
        self.subjects = data

class Rasp():
    timetable: List[RaspDay] = []

    def __init__(self, rasp: List[RaspDay]):
        self.timetable = rasp[:]

    def find_next(self, subject, amount = 1, today = False):
        '''–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–µ—Ä–≤—ã–µ amount —Å–¥–≤–∏–≥–æ–≤ –¥–æ –¥–Ω–µ–π,
        –≤ –∫–æ—Ç–æ—Ä—ã–µ –±—É–¥–µ—Ç –ø—Ä–µ–¥–º–µ—Ç subject, –≤–∫–ª—é—á–∞—è —Ç–µ–∫—É—â–∏–π, –µ—Å–ª–∏ today'''
        cur_week_day = datetime.date.today()
        cur_week_day = cur_week_day.weekday()
        ans = []
        for i in range(int(today), 1000):
            if subject in self.timetable[(cur_week_day + i) % 7].subjects:
                ans.append(i)
                if len(ans) == amount:
                    return ans

def unbreakable_async_decorator(func):
    async def wrapper(*args, **kwargs):
        try:
            result = await func(*args, **kwargs)
            return result
        except Exception as s:
            await client.send_message(boss, str(s) + ' ' + func.__name__)
            if isinstance(s, AlreadyInConversationError):
                if isinstance(args[0], NewMessage.Event):
                    await client.send_message(args[0].message.from_id, "–î—É—Ä–∞—á–æ–∫, —Ç—ã —É–∂–µ –∑–∞—Ö–æ–¥–∏–ª –≤ –∫–∞–∫—É—é-—Ç–æ —Ñ—É–Ω–∫—Ü–∏—é –∏ –Ω–µ –≤—ã—à–µ–ª!\nüò°üò°üò°üò°üò°")
    return wrapper

def button_event(user, msg) -> events.CallbackQuery:
    return events.CallbackQuery(func=lambda e: e.sender_id == user and e.query.msg_id == msg)

@unbreakable_async_decorator
async def send_inline_message(conv: Conversation, message: MessageLike, buttons: Sequence[str], timeout: Optional[float] = None, edited_message: Optional[List[str]] = None) -> Optional[int]:
    '''
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏ –≤ —á–∞—Ç –∏ –∂–¥–µ—Ç –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –Ω–µ–≥–æ

    –ê—Ä–≥—É–º–µ–Ω—Ç—ã
        conv:
            –°onversation, –∫—É–¥–∞ –±—É–¥–µ—Ç  –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ

        message:
            –°–æ–æ–±—â–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–º–∏–º–æ –∫–Ω–æ–ø–æ–∫

        buttons:
            –¢–µ–∫—Å—Ç—ã –Ω–∞ –∫–Ω–æ–ø–∫–∞—Ö

        timeout (optional):
            –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç –≤ —Ç–µ—á–µ–Ω–∏–µ timeout —Å–µ–∫—É–Ω–¥,
            —Å–æ–æ–±—â–µ–Ω–∏–µ —É–¥–∞–ª—è–µ—Ç—Å—è, –∞ —Ñ—É–Ω–∫—Ü–∏—è –Ω–∏—á–µ–≥–æ –Ω–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç

        edited_message (optional):
            –ü–æ—Å–ª–µ –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è i-—ã–º –≤–∞—Ä–∏–∞–Ω—Ç–æ–º
            —Å–æ–æ–±—â–µ–Ω–∏–µ –∑–∞–º–µ–Ω—è–µ—Ç—Å—è –Ω–∞ edited_message[i]

    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç
        –ò–Ω–¥–µ–∫—Å –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ buttons, –∏–ª–∏ –Ω–∏—á–µ–≥–æ
    '''

    buttons = [Button.inline(el) for el in buttons]
    if len(buttons) > 3:
        le = len(buttons) // 3 + (len(buttons) % 3 != 0)
        real_buttons = [buttons[i * le: (i + 1) * le] for i in range(3)]
    else:
        real_buttons = buttons
    markup = client.build_reply_markup(real_buttons)
    # await conv.send_message(message, buttons=markup)
    sent_message = await conv.send_message(message, buttons=markup)
    try:
        clicked_button = await conv.wait_event(button_event(conv.chat_id, sent_message.id), timeout=timeout)
        print(sent_message)
        print(clicked_button)
    except asyncio.exceptions.TimeoutError:
        for i in range(3, 0, -1):
            await sent_message.edit('–°–∞–º–æ—É–Ω–∏—á—Ç–æ–∂–µ–Ω–∏–µ —á–µ—Ä–µ–∑ {}...'.format(i))
            await asyncio.sleep(1)
        await sent_message.edit('–ê–ª–ª–∞—Ö –ê–∫–±–∞—Ä')
        await sent_message.delete(revoke=True)
        return
    subject = clicked_button.query.data.decode('UTF-8')
    pos = -1
    for i in range(len(buttons)):
        if buttons[i].text == subject:
            pos = i
            break
    if edited_message:
        await clicked_button.edit(edited_message[pos])
    else:
        await clicked_button.edit('–¢—ã –≤—ã–±—Ä–∞–ª {}'.format(subject))
    return pos

home_task_storage = 'databases/ht.bn'
solution_storage = 'databases/sol.bn'
id_to_ind_storage = 'databases/us.bn'
users_storage = 'databases/users.bn'
notes_storage = 'databases/notes.bn'
rasp_storage = 'databases/rasp.bn'
home_tasks = readfile(home_task_storage, True)  # –°–ª–æ–≤–∞—Ä—å: –ü–∞—Ä–∞–ª–ª–µ–ª—å -> –°–ª–æ–≤–∞—Ä—å: –ø—Ä–µ–¥–º–µ—Ç -> –∑–∞–¥–∞–Ω–∏–µ
solutions = readfile(solution_storage, True)  # –°–ª–æ–≤–∞—Ä—å: –ü–∞—Ä–∞–ª–ª–µ–ª—å -> –°–ª–æ–≤–∞—Ä—å: –ø—Ä–µ–¥–º–µ—Ç -> —Ä–µ—à–µ–Ω–∏–µ
notes = readfile(notes_storage, True)
rasp = readfile(rasp_storage, True)  # –°–ª–æ–≤–∞—Ä—å: –ü–∞—Ä–∞–ª–ª–µ–ª—å -> —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ
id_to_ind, max_ind = readfile(id_to_ind_storage,
                              False)  # –°–ª–æ–≤–∞—Ä—å: tg_id -> –∏–Ω–¥–µ–∫—Å –≤ –º–∞—Å—Å–∏–≤–µ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤; –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
users = readfile(users_storage, True)  # –ú–∞—Å—Å–∏–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
pending_review = set()
accepted = set()
current_review = 1


async def main():
    async with client.conversation(boss, timeout=None) as conv:
        await asyncio.gather(send_inline_message(conv, 'asd', ['a', 'b'], 10), send_inline_message(conv, 'asd', ['a', 'b'], 10))


if __name__ == '__main__':
    with client:
        client.loop.run_until_complete(main())
        client.run_until_disconnected()
