from classesnfunctions import *

@unbreakable_async_decorator
async def viewnote(conv: Conversation):
    ind = id_to_ind[await get_id(conv)]
    msg = "–ö–∞–∫—É—é –∑–∞–ø–∏—Å–∫—É —Ö–æ—Ç–µ–ª –±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å?\n"
    i = -1
    buttons = []
    prev_message = None
    while -i <= len(notes[users[ind].par]):
        parse = users[notes[users[ind].par][i].student].name
        parse = parse.split()
        if len(parse) == 2:
            parse = parse[0] + ' ' + parse[1][0] + '.'
        else:
            parse = ' '.join(parse)
        msg += '{}. {} –æ—Ç {}\n'.format(-i, notes[users[ind].par][i].header, parse)
        buttons.append(-i)
        if len(buttons) == 10 or -i == len(notes[users[ind].par]):
            buttons.append('–ù–∞–∑–∞–¥')
            buttons.append("–í–ø–µ—Ä–µ–¥")
            bts = [Button.text(str(el), single_use=True) for el in buttons]
            bts = [bts[i : i + 4] for i in range(0, len(bts), 4)]
            if prev_message is None:
                prev_message = await conv.send_message(msg, buttons = bts)
            else:
                await prev_message.delete(revoke=True)
                prev_message = await conv.send_message(msg, buttons = bts)
            res = (await conv.get_response()).message
            if res.isnumeric():
                res = int(res)
                if res not in buttons:
                    await conv.send_message('Ban')
                    return
                await notes[users[ind].par][-res].show(conv)
                return
            elif res[0] == '–ù':
                i = min(i + 19, -1)
            else:
                i -= 1
            buttons = []
            msg = ''
        else:
            i -= 1
    await conv.send_message('–ó–∞–ø–∏—Å–∫–∏ –∫–æ–Ω—á–∏–ª–∏—Å—å')

@unbreakable_async_decorator
async def addnote(conv: Conversation):
    ind = id_to_ind[await get_id(conv)]
    await conv.send_message('–î–ª—è –Ω–∞—á–∞–ª–∞ –æ–∑–∞–≥–ª–∞–≤—å –µ–µ')
    header = await conv.get_response()
    header = header.message
    note = await get_msg_group(conv, '–•—Ä—à, –∞ —Ç–µ–ø–µ—Ä—å —Å–∫–∏–¥—ã–≤–∞–π —Å–∞–º—É –∑–∞–ø–∏—Å–∫—É. –í –∫–æ–Ω—Ü–µ, –∫–∞–∫ –≤—Å–µ–≥–¥–∞, /end')
    notes[users[ind].par].append(Note(header, note, ind))
    writefile(notes_storage, notes)
    res = await send_inline_message(conv,
                              "–ì–æ—Ç–æ–≤–æ. –•–æ—á–µ—à—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–µ–π –≤—Å–µ–º –æ–¥–Ω–æ–∫–ª–∞—Å—Å–Ω–∏–∫–∞–º?",
                              ['–î–∞', "–ù–µ—Ç"],
                              30,
                              edited_message=["–©–∞ —Å–¥–µ–ª–∞–µ–º", '–û–∫–∏'])
    if res is not None and res == 0:
        cant = []
        for us in users:
            if isinstance(us, Student) and us.par == users[ind].par and us.tg_id != await get_id(conv):
                try:
                    await client.send_message(us.tg_id, '–ü–æ—è–≤–∏–ª–∞—Å—å –Ω–æ–≤–∞—è –∑–∞–ø–∏—Å–∫–∞ –æ—Ç {}'.format(users[ind].name))
                except:
                    cant.append(us.name)
        if cant:
            message = '–ù–µ —Å–º–æ–≥ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å:\n'
            for el in cant:
                message += el + '\n'
            await conv.send_message(message)
        else:
            await conv.send_message('–£—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤—Å–µ–º')

async def mynotes(conv: Conversation):
    ind = id_to_ind[await get_id(conv)]
    user = users[ind]
    res = '–¢–≤–æ–∏ –∑–∞–ø–∏—Å–∫–∏:\n'
    pos = []
    cnt = 1
    for i in range(len(notes[user.par])):
        if notes[user.par][i].student == ind:
            res += '{}. {}\n'.format(cnt, notes[user.par][i].header)
            pos.append(i)
            cnt += 1
    if pos:
        await conv.send_message(res)
        await conv.send_message("–ö–∞–∫—É—é —Ö–æ—á–µ—à—å –ø–æ–º–µ–Ω—è—Ç—å? (–ù–æ–º–µ—Ä, —è –∂–µ –∏—Ö –Ω–µ –ø—Ä–æ—Å—Ç–æ —Ç–∞–∫ –Ω—É–º–µ—Ä–æ–≤–∞–ª üò°üò°üò°üò°üò°)")
        resp = (await conv.get_response()).message
        try:
            pos = pos[int(resp) - 1]
        except:
            await conv.send_message('–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫.')
        await conv.send_message('–í–æ—Ç –æ–Ω–∞:')
        await notes[user.par][pos].show(conv)
        res = await send_inline_message(conv, "–ß—Ç–æ —Ö–æ—á–µ—à—å —Å –Ω–µ–π —Å–¥–µ–ª–∞—Ç—å?", ["–ò–∑–º–µ–Ω–∏—Ç—å", "–ü–µ—Ä–µ–æ–ø–æ–≤–µ—Å—Ç–∏—Ç—å", "–ù–∏—á–µ–≥–æ"])
        if res is not None and res == 0:
            tmp = await get_msg_group(conv, '–°–∫–∏–¥—ã–≤–∞–π –µ–µ –Ω–æ–≤—ã–π –≤–∏–¥. –í –∫–æ–Ω—Ü–µ, –∫–∞–∫ –≤—Å–µ–≥–¥–∞, /end')
            notes[users[ind].par][pos] = Note(notes[users[ind].par][pos].header, tmp, ind)
            writefile(notes_storage, notes)
            await conv.send_message('OK')
        elif res == 1:
            await conv.send_message("–î–æ–ø—É—Å—Ç–∏–º... –ó–∞ –∑–ª–æ—É–ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ –∏ –±–∞–Ω –º–æ–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å")
            cant = []
            for us in users:
                if isinstance(us, Student) and us.par == users[ind].par and us.tg_id != await get_id(conv):
                    try:
                        await client.send_message(us.tg_id, '–ü—Ä–æ—Å—è—Ç –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å—Ç–∞—Ä—É—é –∑–∞–ø–∏—Å–∫—É –æ—Ç {}'.format(users[ind].name))
                    except:
                        cant.append(us.name)
            if cant:
                message = '–ù–µ —Å–º–æ–≥ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å:\n'
                for el in cant:
                    message += el + '\n'
                await conv.send_message(message)
            else:
                await conv.send_message('–£—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤—Å–µ–º')
        else:
            await conv.send_message('OK')
    else:
        await conv.send_message("–¢—ã –µ—â–µ –Ω–µ —Å–æ–∑–¥–∞–≤–∞–ª –Ω–∏ –æ–¥–Ω–æ–π!")

@unbreakable_async_decorator
async def addnote_teacher(conv: Conversation):
    ind = id_to_ind[await get_id(conv)]
    teacher: Teacher = users[ind]
    # teacher = Teacher(boss, '–°–µ–Ω—è', '–°–µ–Ω–µ–π', ['11–ë', "11–í"], ['phy', 'ast'])
    if len(teacher.classes) > 1:
        par = teacher.classes[await send_inline_message(conv, '–î–ª—è –∫–∞–∫–æ–≥–æ –æ–Ω–∞ –∫–ª–∞—Å—Å–∞?', teacher.classes)]
    else:
        par = teacher.classes[0]
    await conv.send_message('–û–∑–∞–≥–ª–∞–≤—å—Ç–µ –µ–µ')
    header = await conv.get_response()
    header = header.message
    note = await get_msg_group(conv, '–û–∫, –∞ —Ç–µ–ø–µ—Ä—å —Å–∫–∏–¥—ã–≤–∞–π—Ç–µ —Å–∞–º—É –∑–∞–ø–∏—Å–∫—É. –í –∫–æ–Ω—Ü–µ, –∫–∞–∫ –≤—Å–µ–≥–¥–∞, /end')
    notes[par].append(Note(header, note, ind))
    writefile(notes_storage, notes)
    res = await send_inline_message(conv,
                              "–ì–æ—Ç–æ–≤–æ. –•–æ—Ç–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–µ–π –≤—Å–µ–º –≤ —ç—Ç–æ–º –∫–ª–∞—Å—Å–µ?",
                              ['–î–∞', "–ù–µ—Ç"],
                              30,
                              )
    if res is not None and res == 0:
        cant = []
        for us in users:
            if isinstance(us, Student) and us.par == par:
                try:
                    await client.send_message(us.tg_id, '–ü–æ—è–≤–∏–ª–∞—Å—å –Ω–æ–≤–∞—è –∑–∞–ø–∏—Å–∫–∞ –æ—Ç {}'.format(teacher.name))
                except:
                    cant.append(us.name)
        if cant:
            message = '–ù–µ —Å–º–æ–≥ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å:\n'
            for el in cant:
                message += el + '\n'
            await conv.send_message(message)
        else:
            await conv.send_message('–£—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤—Å–µ–º')

@unbreakable_async_decorator
async def mynotes_teacher(conv: Conversation):
    ind = id_to_ind[await get_id(conv)]
    teacher = users[ind]
    # teacher = Teacher(boss, '–°–µ–Ω—è', '–°–µ–Ω–µ–π', ['11–ë', "11–í"], ['phy', 'ast'])
    if len(teacher.classes) > 1:
        par = teacher.classes[await send_inline_message(conv, '–î–ª—è –∫–∞–∫–æ–≥–æ –æ–Ω–∞ –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–∞–ª–∞—Å—å –∫–ª–∞—Å—Å–∞?', teacher.classes)]
    else:
        par = teacher.classes[0]
    res = '–í–∞—à–∏ –∑–∞–ø–∏—Å–∫–∏:\n'
    pos = []
    cnt = 1
    for i in range(len(notes[par])):
        if notes[par][i].student == ind:
            res += '{}. {}\n'.format(cnt, notes[par][i].header)
            pos.append(i)
            cnt += 1
    if pos:
        await conv.send_message(res)
        await conv.send_message("–ö–∞–∫—É—é —Ö–æ—Ç–∏—Ç–µ –ø–æ–º–µ–Ω—è—Ç—å? (–ù–æ–º–µ—Ä)")
        resp = (await conv.get_response()).message
        try:
            pos = pos[int(resp) - 1]
        except:
            await conv.send_message('–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫.')
        await conv.send_message('–í–æ—Ç –æ–Ω–∞:')
        await notes[par][pos].show(conv)
        res = await send_inline_message(conv, "–ß—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å –Ω–µ–π —Å–¥–µ–ª–∞—Ç—å?", ["–ò–∑–º–µ–Ω–∏—Ç—å", "–ü–µ—Ä–µ–æ–ø–æ–≤–µ—Å—Ç–∏—Ç—å", "–ù–∏—á–µ–≥–æ"])
        if res is not None and res == 0:
            tmp = await get_msg_group(conv, '–°–∫–∏–¥—ã–≤–∞–π –µ–µ –Ω–æ–≤—ã–π –≤–∏–¥. –í –∫–æ–Ω—Ü–µ, –∫–∞–∫ –≤—Å–µ–≥–¥–∞, /end')
            notes[par][pos] = Note(notes[par][pos].header, tmp, ind)
            writefile(notes_storage, notes)
            await conv.send_message('OK')
        elif res == 1:
            await conv.send_message('OK')
            cant = []
            for us in users:
                if isinstance(us, Student) and us.par == par:
                    try:
                        await client.send_message(us.tg_id, '–ü—Ä–æ—Å—è—Ç –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å—Ç–∞—Ä—É—é –∑–∞–ø–∏—Å–∫—É –æ—Ç {}'.format(users[ind].name))
                    except:
                        cant.append(us.name)
            if cant:
                message = '–ù–µ —Å–º–æ–≥ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å:\n'
                for el in cant:
                    message += el + '\n'
                await conv.send_message(message)
            else:
                await conv.send_message('–£—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤—Å–µ–º')
        else:
            await conv.send_message('OK')
    else:
        await conv.send_message("–í—ã –µ—â–µ –Ω–µ —Å–æ–∑–¥–∞–≤–∞–ª–∏ –Ω–∏ –æ–¥–Ω–æ–π!")